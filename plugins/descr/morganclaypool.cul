#
# Copyright (c) 2005 Richard Cameron, CiteULike.org
# Copyright (c) 2005 Dan Hodson, d.l.r.hodson@reading.ac.uk
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. All advertising materials mentioning features or use of this software
#    must display the following acknowledgement:
#        This product includes software developed by
#		 CiteULike <http://www.citeulike.org> and its
#		 contributors.
# 4. Neither the name of CiteULike nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY CITEULIKE.ORG AND CONTRIBUTORS
# ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

# Each plugin needs a description so the driver can advertise the details
# to the users on the site
plugin {
	# Integer version number for the plugin code. When this number is incremented,
	# CiteULike may reparse all existing articles with the new code.
	version {2}

	# The name of the plugin, as displayed on the "CiteULike supports..." page
	name {Morgan and Claypool}

	# The link the front page of this service
	url {http://www.morganclaypool.com/}

	# Any additional information which needs to be displayed to the user.
	# E.g. "Experimental support"
	blurb {Experimental Support}

	# Your name
	author {Fergus Gallagher}

	# Your email address
	email {fergus@gooses.co.uk}

	# Language you wrote the plugin in
	language {python}


	# Regular expression to match URLs that the plugin is
	# *potentially* interested in. Any URL matching this regexp
	# will cause your parser to be invoked. Currently, this will
	# require fork()ing a process, so you should try to reduce the number
	# of false positives by making your regexp as restrictive as possible.
	#
	# If it is not possible to determine whether or not your plugin is
	# interested purely on the basis of the URL, you will have a chance
	# to refine this decision in your code. For now, try to make a reasonable
	# approximation - like, check for URLs on the right hostname
	#
	# Note: Some universities provide mirrors of commericial publishers' sites
	# with different hostnames, so you should provide some leeway in your
	# regexp if that applies to you.
	#

	regexp {http://www.morganclaypool.com/doi/}
}
#
# Linkout formatting
#

# CiteULike doesn't store URLs for articles.
# Instead it stores the raw ingredients required to build the dynamically.
# Each plugin is required to define a small procedure which does this formatting
# See the HOWTO file for more details.
#
# The variables following variables are defined for your use
# in the function: type ikey_1 ckey_1 ikey_2 ckey_2
#

format_linkout MORGAN {#

        return [list MORGAN "http://www.morganclaypool.com/doi/abs/${ckey_1}"]

}


#
# TESTS
#

# Each plugin MUST provide a set of tests. The motivation behind this is
# that web scraping code is inherently fragile, and is likely to break whenever
# the provider decides to redisign their site. CiteULike will periodically
# run tests to see if anything has broken.

# Please provide as comprehensive a set of tests as possible.
# If you ever fix a bug in the parser, it is highly recommended that
# you add the offending page as a test case.




test {http://www.morganclaypool.com/doi/abs/10.2200/S00089ED1V01Y200704MPC002} {
	type JOUR
	volume 2
	serial 1933-9011
	linkout {MORGAN {} 10.2200/S00089ED1V01Y200704MPC002 {} {}}
	linkout {DOI {} 10.2200/S00089ED1V01Y200704MPC002 {} {}}
	year 2007
	month 1
	day 1
	start_page 1
	url http://dx.doi.org/10.2200/S00089ED1V01Y200704MPC002
	end_page 89
	doi 10.2200/S00089ED1V01Y200704MPC002
	publisher {Morgan & Claypool Publishers}
	formatted_url {MORGAN http://www.morganclaypool.com/doi/abs/10.2200/S00089ED1V01Y200704MPC002}
	formatted_url {DOI http://dx.doi.org/10.2200/S00089ED1V01Y200704MPC002}
	issue 1
	title {Controlling Energy Demand in Mobile Computing Systems}
	journal {Synthesis Lectures on Mobile and Pervasive Computing}
	abstract {Abstract This lecture provides an introduction to the problem of managing the energy demand of mobile devices. Reducing energy consumption, primarily with the goal of extending the lifetime of battery-powered devices, has emerged as a fundamental challenge in mobile computing and wireless communication. The focus of this lecture is on a systems approach where software techniques exploit state-of-the-art architectural features rather than relying only upon advances in lower-power circuitry or the slow improvements in battery technology to solve the problem. Fortunately, there are many opportunities to innovate on managing energy demand at the higher levels of a mobile system. Increasingly, device components offer low power modes that enable software to directly affect the energy consumption of the system. The challenge is to design resource management policies to effectively use these capabilities. The lecture begins by providing the necessary foundations, including basic energy terminology and widely accepted metrics, system models of how power is consumed by a device, and measurement methods and tools available for experimental evaluation. For components that offer low power modes, management policies are considered that address the questions of when to power down to a lower power state and when to power back up to a higher power state. These policies rely on detecting periods when the device is idle as well as techniques for modifying the access patterns of a workload to increase opportunities for power state transitions. For processors with frequency and voltage scaling capabilities, dynamic scheduling policies are developed that determine points during execution when those settings can be changed without harming quality of service constraints. The interactions and tradeoffs among the power management policies of multiple devices are discussed. We explore how the effective power management on one component of a system may have either a positive or negative impact on overall energy consumption or on the design of policies for another component. The important role that application-level involvement may play in energy management is described, with several examples of cross-layer cooperation. Application program interfaces (APIs) that provide information flow across the application-OS boundary are valuable tools in encouraging development of energy-aware applications. Finally, we summarize the key lessons of this lecture and discuss future directions in managing energy demand. Abstract This lecture provides an introduction to the problem of managing the energy demand of mobile devices. Reducing energy consumption, primarily with the goal of extending the lifetime of battery-powered devices, has emerged as a fundamental challenge in mobile computing and wireless communication. The focus of this lecture is on a systems approach where software techniques exploit state-of-the-art architectural features rather than relying only upon advances in lower-power circuitry or the slow improvements in battery technology to solve the problem. Fortunately, there are many opportunities to innovate on managing energy demand at the higher levels of a mobile system. Increasingly, device components offer low power modes that enable software to directly affect the energy consumption of the system. The challenge is to design resource management policies to effectively use these capabilities. The lecture begins by providing the necessary foundations, including basic energy terminology and widely accepted metrics, system models of how power is consumed by a device, and measurement methods and tools available for experimental evaluation. For components that offer low power modes, management policies are considered that address the questions of when to power down to a lower power state and when to power back up to a higher power state. These policies rely on detecting periods when the device is idle as well as techniques for modifying the access patterns of a workload to increase opportunities for power state transitions. For processors with frequency and voltage scaling capabilities, dynamic scheduling policies are developed that determine points during execution when those settings can be changed without harming quality of service constraints. The interactions and tradeoffs among the power management policies of multiple devices are discussed. We explore how the effective power management on one component of a system may have either a positive or negative impact on overall energy consumption or on the design of policies for another component. The important role that application-level involvement may play in energy management is described, with several examples of cross-layer cooperation. Application program interfaces (APIs) that provide information flow across the application-OS boundary are valuable tools in encouraging development of energy-aware applications. Finally, we summarize the key lessons of this lecture and discuss future directions in managing energy demand.}
	author {Ellis Carla CS {Ellis, Carla Schlatter}}
	status ok
}

